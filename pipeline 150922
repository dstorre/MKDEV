		/*
o	File Name: MKDEV915-analysis01-pipeline analysis for developmental meeting Sept 21 2015.do
o	Author: Nicole Arshan & Daniela Torre
o	Date drafted: Sept 2015 (from MK15 report)
o	Date revised: 
o	Datasets pulled in: MK15-cleandata-studentlevelanalysis.dta 
		-NOTE: We're using the data that was cleaned for the MK15 report -- no need to re-clean it
o	Datasets produced: 
o	Purpose (a broad overview of what the code does):

	1) Append clean data files from each district, dropping only to students/ schools/ variables necessary for analysis
	2) Run piple line results by cohort only (combining all schools). Run by DLL and nonDLL. 
		-Want just K as denominator. 
		-Driving question: if the program is supposed to work over the course of K-3, how many kids are still in district in 3rd grade to have been in entire program
	3) Save results in a way that can be easily read
	4) Make pie charts by cohort only (combining all schools). Run by DLL and nonDLL.
	5) Make survival type charts by cohort only, by district, school and by dll status

	
	NOTE: We had a problem with the SPPS Race variable in the descriptives, wherein it was labeled the same as the other two districts but it's actually coded differently.
			The code in here already fixed that problem, so there was no effect on the results
			
	NOTE: Something is off with the 2011 and 2014 cohorts of SPMA data. I ran all graphs with and without SPMA. Going forward, we should try to get a new copy or find a better version
	of SPMA data. 
	*/

	clear all 
	version 13.1
	capture log close
	set more off
	
	***********************************************************************************************************************************************************
		// 0. Change directories and set up a name to add to any output so it can be traced back to this file
	***********************************************************************************************************************************************************
	local pc = 0 // make switch to go back and forth b/w pc and mac. 
	local clean=0 // make switch to run append/clean code
	local numbers=0 // make switch to run numbers
	local pie=0 // make switch to run pie graphs
	local line_all =0 // make switch to run line graphs program wide
	local line_schools =0 // make switch to run line graphs schools, no spma
	local line_districts =0 //  make switch to run line graphs district, no spma
	local line_spma =0 // make switch to run line graphs schools, just spma
	local line_cohort_compare=1 /// make switch to compare cohorts, no spma
	
	if `pc' ==1 {
	/* PC */
	global 	olddata 	"\\128.18.33.163\Programs\McKnight - MK (P20981)\2015 Report - MK15\Data\Clean Data\"									// where you pull the clean data from
	global 	newdata 	"\\128.18.33.163\Programs\McKnight - MK (P20981)\2015 Developmental Evaluation - MKDEV915\Data\Clean Data\"				// where you store the clean data from
	global 	output 		"\\128.18.33.163\Programs\McKnight - MK (P20981)\2015 Developmental Evaluation - MKDEV915\Output\"						// where you output results to
	global 	logs		"\\128.18.33.163\Programs\McKnight - MK (P20981)\2015 Developmental Evaluation - MKDEV915\Logs and Documentation\"		// where you save log files, etc.
	}	
	
	else {
	/* MAC */
	global 	olddata 	"/Volumes/Programs/McKnight - MK (P20981)/2015 Report - MK15/Data/Clean Data/"									// where you pull the clean data from (mac)
	global newdata 	"/Volumes/Programs/McKnight - MK (P20981)/2015 Developmental Evaluation - MKDEV915/Data/Clean Data/"				// where you store the clean data from (mac)
	global 	output 		"/Volumes/Programs/McKnight - MK (P20981)/2015 Developmental Evaluation - MKDEV915/Output/"						// where you output results to (mac)
	global 	logs		"\\128.18.33.163\Programs\McKnight - MK (P20981)\2015 Developmental Evaluation - MKDEV915\Logs and Documentation\"		// where you save log files, etc.
			}
	
	global version		""																									// use v2 if update this file after posting results
	
	log using "${logs}MKDEV915-log-studentlevelresults.smcl", replace
	
	***********************************************************************************************************************************************************
		// 1. Append three district files together to make a file that can be used to run descrptivrs for all districts combined
	***********************************************************************************************************************************************************
	  


	
if `clean'==1 {
use "${olddata}spps clean.dta", clear 
destring zip , replace force
 
gen spps=1
append using "${olddata}bc clean.dta"
destring ach_l*, replace force
recode schnum .=480 if bc==1																	// Earl Browne's school number
replace number=number+100000000000000	if bc==1												// There had been dups with MSP number variable, which this is designed to prevent
	notes number: added 100,000,000,000,000 to BC ID Number to prevent duplicates with other districts 
append using "${olddata}mps clean.dta"
recode bc .=0
recode spps .=0
recode mps .=0

// make school dumies
replace jefferson =0 if schnum!=179
label var jefferson "1=Jefferson; 0=Not Jefferson"
replace wellstone=0 if schnum!=552
label var wellstone "1=Wellstone; 0=Not Wellstone"
replace spma=0 if schnum!=558
label var spma "1=St. Paul Music Academy; 0=Not SPMS"
replace andersen=0 if schnum!=190
label var andersen "1=Andersen; 0=Not Andersen"
label var bc "1= Earle Brown; 0= Not Earle Brown"
replace schname="Earle Brown" if bc==1


drop sm*20*

	***********************************************************************************************************************************************************
		// 2. Drop to the records and variables we need
	***********************************************************************************************************************************************************


		// don't need comparison schools
		keep if (inlist(schnum, 179, 552, 558, 190) | bc==1)

		//	drop to the variables we need
		keep number schnum lep grade endyear schname bc mps andersen jefferson spma wellstone spps repeat
	
		// just working with K-3, so drop PK records
		drop if inlist(grade, -1, .)
		
		// only want the folks who were there in K to begin with
		sort number endyear
		bysort number: egen X_entergrade=min(grade)
		keep if X_entergrade==0
		
		// deal with the repeats -- drop the first instance they were in a repeated grade
		gsort number -endyear
		egen X_min=tag(number grade)
		drop if X_min==0

		// ID their first year in the district and then assign that as a cohort
		sort number endyear
		bysort number: egen X_cohort=min(endyear) if grade==0
		bysort number: egen cohort=min(X_cohort)
				
		drop X_*
		
		label define lep 0 "Non-DLL" 1 "DLL"
		label values lep lep
		
		bysort number: gen progyrs=_N // gen number of years each student was in the program

		save "${newdata}all program schools clean.dta", replace // save appended data

	} /*close clean switch*/	

else {
use "${newdata}all program schools clean.dta", clear
}

	***********************************************************************************************************************************************************
		// 3. Run retention numbers by cohort and DLL Status
	***********************************************************************************************************************************************************
if `numbers'==1 {		
		log on
		use "${newdata}all program schools clean.dta", clear /*open appended clean data*/

		forv c=2010/2013 {
	
		dis "Enrollment in K-3 for students whose last K year was `=`c'-1' - `c'"
		tab grade lep if cohort==`c'
		
		}
	
		log close

}
		
		**********************************************************************************************************************************************************
		// 4. Make pie charts by cohort only (combining all schools). Run by DLL and nonDLL.
	***********************************************************************************************************************************************************
* do we have reclassification data? 
if `pie'==1 {
foreach year of numlist 2008/2013 {

*Make pie charts by cohort showing the number of students who persisted through each grade

graph pie  if cohort==`year', over(progyrs) ///
	plabel(_all percent, format("%2.0f"))  ///
	legend(title(Last Grade)  ///
	label(1 "K") label(2 "1") label( 3 "2") label( 4 "3") ///
	pos(9) cols(1) ) ///
	title( "`year' K Cohort Program Retention") 
	graph export "${output}`year' cohort retention pie.png", replace 

*Make pie charts by cohort and DLL status showing the number of students who persisted through each grade
graph pie  if grade==0 & cohort==`year', ///
	over(progyrs) ///
	by(lep, legend(pos(9))) ///
	plabel(_all percent, format("%2.0f"))  ///
	legend(title(Last Grade) ///
	label(1 "K") label(2 "1") label( 3 "2") label( 4 "3")) ///
	legend(cols(1)) 
	graph export "${output}`year' cohort retention pie dll.png", replace 

	}
} // close switch	

	**********************************************************************************************************************************************************
		// 5. Make survival type charts by cohort only, by district, schools, etc, and by dll status
	***********************************************************************************************************************************************************
	drop if grade==3 & cohort==2012  // I dropped this one obs because it was a complete outlier
	
	**********************************************************************************************************************************************************
	// Create Program wide Retention Variables by Cohort
	**********************************************************************************************************************************************************
		
if `line_all'==1 {
		
		drop if spma==1 				// spma is whack, so dropping so averages are not all incorrect. 
		
		foreach cohort of numlist 2008/2013 {
		
		preserve 						// preserving full dataset
		keep if cohort==`cohort'		// keep one cohort at a time 
	
		gen retain=.					// make a variable that counts the number of students who ar in each grade
		levelsof grade, local(grade)
		foreach num of local grade {
		count if grade==`num' 
		replace retain=r(N) if grade==`num' 
		}
	
		
		gen p_retain=.					// make the same variable but as a percent to make graphs easier to read
		count if grade==0 
		scalar k=r(N)
		foreach num of local grade {
		count if grade==`num' 
		replace p_retain=(r(N)/k)*100 if grade==`num'
		format p_retain %8.0f
		}
		
		//Create Overall Retention Graph by Cohort

		twoway connected p_retain grade, ///
		sort ///
		lwidth(medthick medthick medthick) ///
		msize(small small small) ///
		xtitle("Grade") ///
		xlabel( 0 "K (n=g0)" 1 "1 (n=$g1)" 2 "2 (n=$g2)" 3 "3 (n=$g3)") ///
		ytitle("% of Students ") ///
		yscale(range(0(10)100)) ///
		ylabel(0(20)100) ///
		graphregion(color(white)) 
		
		graph export "${output}`cohort' cohort retention line overall.png", replace
		
		
		**********************************************************************************************************************************************************
		//Create DLL Retention Variables - Overall
		**********************************************************************************************************************************************************
		
		gen n_lep=lep==0			//make a variable indicating not lep. alt to using levelsof
		
		foreach var in n_lep lep { 	// make retention varaible as above by DLL status
	
		gen retain_`var'=.
		foreach num of numlist 0/3 {
		count if grade==`num' & `var'==1
		replace retain_`var'=r(N) if grade==`num' & `var'==1 
		}
	
		gen p_retain_`var'=.		// make retention pct varaible as above by DLL status
		count if grade==0 & `var'==1
		scalar k=r(N)
		foreach num of numlist 0/3 {
		count if grade==`num' & `var'==1
		replace p_retain_`var'=(r(N)/k)*100 if grade==`num' & `var'==1
		}
		} //close dll loop
		
		
		// Create Overall by DLL Graph
		format p_retain_n_lep p_retain_lep %9.0f
		twoway connected p_retain_n_lep p_retain_lep grade, ///
		sort ///
		lwidth(medthick medthick medthick) ///
		lpattern(".._.." longdash) ///
		msize(small small small) ///
		mlabel(p_retain_n_lep p_retain_lep ) ///
		mlabsize(medsmall medsmall ) ///
		mlabpos(12 12) ///
		mlabcolor(black black) ///
		xtitle("Grade") ///
		xlabel( 0 "K" 1 "1" 2 "2" 3 "3") ///
		ytitle("% of Students") ///
		legend(label (1 "Non-DLL") label(2 "DLL") cols(2)) ///
		yscale(range(0(10)100)) ///
		ylabel(0(20)100) ///
		ytick(#10) ///
		graphregion(color(white)) ///
		note(Note: Averages do not include SPMA enrollment data)

		graph export "${output}`cohort' cohort retention line overall lep.png", replace
		
		
		restore						// restore full dataset to loop through the next cohort
		} // close foreach cohort
		} // close line_all switch
		
		
	
	
	**********************************************************************************************************************************************************
	// Create Schools Retention Variables by Cohort
	**********************************************************************************************************************************************************
	
		if `line_schools' ==1 {
	
		drop if spma==1 		// spma is whack, so dropping so averages are not all incorrect. 
		gen n_lep=lep==0		

		foreach cohort of numlist 2008/2013 {
		preserve
		keep if cohort==`cohort'
		
		foreach dis in wellstone andersen jefferson cpa bc { 	//loop through each schoool
 
		gen p_retain_`dis'=.
		count if grade==0 & `dis'==1
		scalar k=r(N)
		
		foreach num of numlist 0/3  {
		count if grade==`num' & `dis'==1
		replace p_retain_`dis'=(r(N)/k)*100 if grade==`num' & `dis'==1
		} //foreach num
		
		
		
		
		**********************************************************************************************************************************************************
		//Create DLL Retention Variables - by school: no spma
		**********************************************************************************************************************************************************

		foreach var in n_lep lep { 
	
		
		gen p_retain_`var'_`dis'=.
		count if grade==0 & `var'==1 & `dis'==1
		scalar k=r(N)
		
		foreach num of numlist 0/3 {
		count if grade==`num' & `var'==1 &`dis'==1
		replace p_retain_`var'_`dis'=(r(N)/k)*100 if grade==`num' & `var'==1 & `dis'==1
		} // close grade
	
		} //close dll loop
		
		**********************************************************************************************************************************************************
		// Create School Retention Graphs by cohort
		**********************************************************************************************************************************************************
		*Individual schools
		
		
	
		twoway connected p_retain_`dis' grade, ///
		sort ///
		lwidth(medthick medthick medthick) ///
		msize(small small small) ///
		xtitle("Grade") ///
		xlabel( 0 "K" 1 "1" 2 "2" 3 "3") ///
		ytitle("% of Students") ///
		yscale(range(0(10)100)) ///
		ylabel(0(20)100) ///
		graphregion(color(white)) 


		graph export "${output}`cohort' cohort retention line `dis'.png", replace
		
	
		**********************************************************************************************************************************************************
		// Create School by DLL Graph: no spma
		**********************************************************************************************************************************************************
		
		count if n_lep== 1 & `dis'==1 		// store counts of DLL/ non DLL in memory to use in graph labels
		di r(N)
		local nlep =r(N)
		count if lep== 1	& `dis'==1
		di r(N)
		local lep =r(N)
		
		twoway connected p_retain_n_lep_`dis' p_retain_lep_`dis' grade if `dis'==1, ///
		sort ///
		lpattern(".._.." longdash) ///
		lwidth(medthick medthick ) ///
		msize(small small ) ///
		xtitle("Grade") ///
		xlabel( 0 "K" 1 "1" 2 "2" 3 "3") ///
		ytitle("% of Students ") ///
		legend(label (1 "Non-DLL (n=`nlep')") label(2 "DLL (n=`lep')") cols(2)) ///
		yscale(range(0(10)100)) ///
		ylabel(0(20)100)  ///
		graphregion(color(white))


	
		graph export "${output}`cohort' cohort retention line `dis' lep lab.png", replace
		
		} // close school loop
		
		restore 			// restore data to loop through cohort

		} // close cohort loop

		
		} // close line_schools
		
		
		
		**********************************************************************************************************************************************************
		// Create District Retention Variables	by cohort- No SPMA
		**********************************************************************************************************************************************************
		if `line_districts' ==1 {
		drop if spma==1 				// spma is whack, so dropping so averages are not all incorrect. 
		gen n_lep=lep==0

		foreach cohort of numlist 2008/2013 {
		
		preserve
		keep if cohort==`cohort'
		
		foreach var in spps mps bc cpa { 			// loop through districts
	
		gen p_retain_`var'=.
		count if grade==0 & `var'==1
		scalar k=r(N)
		foreach num of numlist 0/3 {
		count if grade==`num' & `var'==1
		replace p_retain_`var'=(r(N)/k)*100 if grade==`num' & `var'==1
		} //foreach num
		} //close district loop
	
		**********************************************************************************************************************************************************
		// Create District Retention Graphs by cohort
		**********************************************************************************************************************************************************


		*All Districts Combined
		twoway connected p_retain_bc p_retain_mps p_retain_spps p_retain_cpa grade, ///
		sort ///
		lwidth(medthick medthick medthick) ///
		msize(small small small) ///
		xtitle("Grade") ///
		xlabel( 0 "K" 1 "1" 2 "2" 3 "3") ///
		ytitle("% of Students ") ///
		legend(label (1 "BC") label(2 "MPS") label( 3 "SPPS") label( 4 "CPA") cols(4)) ///
		yscale(range(0(10)100)) ///
		ylabel(0(20)100) ///
		graphregion(color(white)) /// 
		note(Note: Averages do not include SPMA enrollment data)

		graph export "${output}`cohort' cohort retention line by district.png", replace
		
		
		
		*Individual districts
		foreach var in spps mps  { 
	
		twoway connected p_retain_`var' grade, ///
		sort ///
		lwidth(medthick medthick medthick) ///
		msize(small small small) ///
		xtitle("Grade") ///
		xlabel( 0 "K" 1 "1" 2 "2" 3 "3") ///
		ytitle("% of Students") ///
		yscale(range(0(10)100)) ///
		ylabel(0(20)100) ///
		graphregion(color(white)) 


		graph export "${output}`cohort' cohort retention line `var'.png", replace
		
		} // close individual district graph switch
		**********************************************************************************************************************************************************
		//Create DLL Retention Variables - by District
		**********************************************************************************************************************************************************

		
		foreach dis in spps mps{ 

		foreach var in n_lep lep { 
	
		gen retain_`var'_`dis'=.
		foreach num of numlist 0/3 {
		count if grade==`num' & `var'==1 & `dis'==1
		replace retain_`var'_`dis'=r(N) if grade==`num' & `var'==1 & `dis'==1
		}
	
		gen p_retain_`var'_`dis'=.
		count if grade==0 & `var'==1 &`dis'==1
		scalar k=r(N)
		foreach num of numlist 0/3 {
		count if grade==`num' & `var'==1 &`dis'==1
		replace p_retain_`var'_`dis'=(r(N)/k)*100 if grade==`num' & `var'==1 & `dis'==1
		}
	
		} //close dll loop
		} //close dis loop	
		
		**********************************************************************************************************************************************************
		// Create District by DLL Graph
		**********************************************************************************************************************************************************

		foreach var in spps mps { 
		count if n_lep== 1 & `var'==1
		di r(N)
		local nlep =r(N)
		count if lep== 1	& `var'==1
		di r(N)
		local lep =r(N)
		
		twoway connected p_retain_n_lep_`var' p_retain_lep_`var' grade if `var'==1, ///
		sort ///
		lpattern(".._.." longdash) ///
		lwidth(medthick medthick ) ///
		msize(small small ) ///
		xtitle("Grade") ///
		xlabel( 0 "K" 1 "1" 2 "2" 3 "3") ///
		ytitle("% of Students ") ///
		legend(label (1 "Non-DLL (n=`nlep')") label(2 "DLL (n=`lep')") cols(2)) ///
		yscale(range(0(10)100)) ///
		ylabel(0(20)100)  ///
		graphregion(color(white))


	
		graph export "${output}`cohort' cohort retention line `var' lep lab.png", replace
		
		} //close district dll loop
	
		restore 
		} // close cohort 
		} // close line_district
		
		
		
		if `line_spma'==1 {
		**********************************************************************************************************************************************************
		//Create DLL Retention Variables - by school: just spma
		**********************************************************************************************************************************************************

		
		foreach dis in spma { 
		gen n_lep=lep==0
		
		foreach cohort of numlist 2012/2013 {
		preserve
		keep if `dis'==1 	
		keep if cohort==`cohort'
		drop if grade==3 | grade==2
		
		
		foreach var in n_lep lep { 

	
		gen p_retain_`var'_`dis'=.
		count if grade==0 & `var'==1 &`dis'==1
		scalar k=r(N)
		
		foreach num of numlist 0/1 {
		count if grade==`num' & `var'==1 &`dis'==1
		replace p_retain_`var'_`dis'=(r(N)/k)*100 if grade==`num' & `var'==1 & `dis'==1
		}
	
		} //close dll loop
		
		**********************************************************************************************************************************************************
		// Create School by DLL Graph: just spma
		**********************************************************************************************************************************************************

		count if n_lep== 1 & `dis'==1
		di r(N)
		local nlep =r(N)
		count if lep== 1	& `dis'==1
		di r(N)
		local lep =r(N)
		
		twoway connected p_retain_n_lep_`dis' p_retain_lep_`dis' grade if `dis'==1, ///
		sort ///
		lpattern(".._.." longdash) ///
		lwidth(medthick medthick ) ///
		msize(small small ) ///
		xtitle("Grade") ///
		xlabel( 0 "K" 1 "1" ) ///
		ytitle("% of Students ") ///
		legend(label (1 "Non-DLL (n=`nlep')") label(2 "DLL (n=`lep')") cols(2)) ///
		yscale(range(0(10)100)) ///
		ylabel(0(20)100)  ///
		graphregion(color(white))


	
		graph export "${output}`cohort' cohort retention line `dis' lep lab.png", replace
		restore
	
		} //close cohort loop	
		
		} //close dis loop	

		**********************************************************************************************************************************************************
		//Create retention graphs comparing cohorts and schools: SPMA
		**********************************************************************************************************************************************************
	
		gen allsch=1

		// Create  Retention Variables	by cohort
		gen retain=.
		
		foreach cohort of numlist 2012/2013 {

		count if cohort==`cohort'
		di r(N)
		local n`cohort' =r(N)
	
		gen p_retain_`cohort'=.
		count if grade==0 & cohort==`cohort'
		scalar k=r(N)
		
		foreach num of numlist 0/1 {
		count if grade==`num' & cohort==`cohort'
		replace p_retain_`cohort'=(r(N)/k)*100 if grade==`num' & cohort==`cohort'
		replace retain= p_retain_`cohort' if cohort==`cohort'	
		}
		
	
		} //close cohort loop
		

collapse (mean) retain,by(cohort grade) 

reshape wide retain,i(cohort) j(grade)

foreach num of numlist 0/1 {

egen pre_ret`num'=mean(retain`num') if cohort<2011
}	
gen pre=cohort<2011
foreach num of numlist 0/1 {
gen retain_`num'=.
replace retain_`num'= retain`num' if cohort>2010
replace retain_`num'=pre_ret`num' if cohort<2011
}

drop if cohort<2010 | cohort==2014
reshape long retain_, i(cohort) j(grade)

	

	// Create  Retention Graphs by cohort
	
		*All Districts Combined
		twoway connected retain_ grade if cohort==2012, lpattern(longdash)  ///
		|| connected retain_ grade if cohort==2013, lpattern("_--_#") ///
		sort ///
		lwidth(medthick  ) ///
		msize(small small small small) ///
		xtitle("Grade") ///
		xlabel( 0 "K" 1 "1" ) ///
		ytitle("% of Students", height(10)) ///
		yscale(range(0(10)100)) ///
		ylabel(0(20)100) ///
		ytick(#10) ///
		legend(label(1 "2011-12 (n=`n2012')") label(2 "2012-13 (n=`n2013')") cols(2)) ///
		graphregion(color(white))
		
		graph export "${output} `dis' retention line by cohort w preprog ave.png", replace
	
 	} //close spma switch
		
		if `line_cohort_compare'==1 {
	**********************************************************************************************************************************************************
	//Create retention graphs comparing cohorts by districts (no spma)
	**********************************************************************************************************************************************************
	
	drop if grade==2 & schname==""
	
	foreach dis in  alldis spps mps bc {	
	preserve
	gen alldis=1
	drop if spma==1

	keep if `dis'==1 	
	
		// Create  Retention Variables	by cohort
		set more off
		gen retain=.
		
		foreach var of numlist 2007/2013 {

		count if cohort==`var'
		di r(N)
		local n`var' =r(N)
		}
		foreach var of numlist 2007/2013 {
	
		
		
		*di `var' 
		gen retain_`var'=.
		foreach num of numlist 0/3 {
		count if grade==`num' & cohort==`var'
		replace retain_`var'=r(N) if grade==`num' & cohort==`var'
		}
	
		gen p_retain_`var'=.
		count if grade==0 & cohort==`var'
		scalar k=r(N)
		foreach num of numlist 0/3 {
		count if grade==`num' & cohort==`var'
		replace p_retain_`var'=(r(N)/k)*100 if grade==`num' & cohort==`var'
		replace retain= p_retain_`var' if cohort==`var'	

		}
	} //close cohort loop
	
	collapse (mean) retain,by(cohort grade) 

	reshape wide retain,i(cohort) j(grade)
	foreach num of numlist 0/3 {

	egen pre_ret`num'=mean(retain`num') if cohort<2011
	}	
	gen pre=cohort<2011
	foreach num of numlist 0/3 {
	gen retain_`num'=.
	replace retain_`num'= retain`num' if cohort>2010
	replace retain_`num'=pre_ret`num' if cohort<2011
	}

drop retain1 retain2 retain3 pre_ret*
drop if cohort<2010 | cohort==2014
reshape long retain_, i(cohort) j(grade)

	// Create  Retention Graphs by cohort
	
		*All Districts Combined
		twoway connected retain_ grade if cohort==2010, lwidth(thick) lpattern(solid) lcolor(black) mcolor(black) ///
		|| connected retain_ grade if cohort==2011, lpattern(".._..") ///
		|| connected retain_ grade if cohort==2012, lpattern(longdash)  ///
		|| connected retain_ grade if cohort==2013, lpattern("_--_#") ///
		sort ///
		lwidth(medthick  ) ///
		msize(small small small small) ///
		xtitle("Grade") ///
		xlabel( 0 "K" 1 "1" 2 "2" 3 "3") ///
		ytitle("% of Students", height(10)) ///
		yscale(range(0(10)100)) ///
		ylabel(0(20)100) ///
		ytick(#10) ///
		legend(label(1 "Pre-Program Avg") label(2 "2010-11 (n=`n2011')") label(3 "2011-12 (n=`n2012')") label(4 "2012-13 (n=`n2013')") cols(2)) ///
		graphregion(color(white)) ///
		note(Note: Averages do not include SPMA enrollment data) 
		
		graph export "${output} `dis' retention line by cohort w preprog ave.png", replace
		restore
	} // close dis loop
 
 
	**********************************************************************************************************************************************************
	//Create retention graphs comparing cohorts by schools (all but spma)
	**********************************************************************************************************************************************************
	
	foreach dis in  jefferson andersen wellstone allsch  {	
	preserve
	gen allsch=1
	keep if `dis'==1 	
	
		// Create  Retention Variables	by cohort
		set more off
		gen retain=.
		
		foreach var of numlist 2007/2013 {

		count if cohort==`var'
		di r(N)
		local n`var' =r(N)
		}
		foreach var of numlist 2007/2013 {
	
		
		
		*di `var' 
		gen retain_`var'=.
		foreach num of numlist 0/2 {
		count if grade==`num' & cohort==`var'
		replace retain_`var'=r(N) if grade==`num' & cohort==`var'
		}
	
		gen p_retain_`var'=.
		count if grade==0 & cohort==`var'
		scalar k=r(N)
		foreach num of numlist 0/3 {
		count if grade==`num' & cohort==`var'
		replace p_retain_`var'=(r(N)/k)*100 if grade==`num' & cohort==`var'
		replace retain= p_retain_`var' if cohort==`var'	

		}
	} //close cohort loop
	
collapse (mean) retain,by(cohort grade) 

reshape wide retain,i(cohort) j(grade)
foreach num of numlist 0/2 {

egen pre_ret`num'=mean(retain`num') if cohort<2011
}	
gen pre=cohort<2011
foreach num of numlist 0/2 {
gen retain_`num'=.
replace retain_`num'= retain`num' if cohort>2010
replace retain_`num'=pre_ret`num' if cohort<2011
}

drop retain1 retain2  pre_ret*
drop if cohort<2010 | cohort==2014
reshape long retain_, i(cohort) j(grade)

	

	// Create  Retention Graphs by cohort
	
		*All schools Combined
		twoway connected retain_ grade if cohort==2010, lwidth(thick) lpattern(solid) lcolor(black) mcolor(black) ///
		|| connected retain_ grade if cohort==2011, lpattern(".._..") ///
		|| connected retain_ grade if cohort==2012, lpattern(longdash)  ///
		|| connected retain_ grade if cohort==2013, lpattern("_--_#") ///
		sort ///
		lwidth(medthick  ) ///
		msize(small small small small) ///
		xtitle("Grade") ///
		xlabel( 0 "K" 1 "1" 2 "2" 3 "3") ///
		ytitle("% of Students", height(10)) ///
		yscale(range(0(10)100)) ///
		ylabel(0(20)100) ///
		ytick(#10) ///
		legend(label(1 "Pre-Program Avg") label(2 "2010-11 (n=`n2011')") label(3 "2011-12 (n=`n2012')") label(4 "2012-13 (n=`n2013')") cols(2)) ///
		graphregion(color(white))
		
		graph export "${output} `dis' retention line by cohort w preprog ave.png", replace
		restore
	} // close foreach dis
	} // close line_cohort_compare

	
	exit 
	
//extra code for inserting n's into district and schools. Didn't use this time but could in future. 


		count if well==1			// store counts of each school into memory to use in the graph labels
		di r(N)
		local well =r(N)
		count if andersen==1
		di r(N)
		local andersen =r(N)
		count if jefferson==1
		di r(N)
		local jeff =r(N)
		count if cpa==1
		di r(N)
		local cpa =r(N)
		count if cpa==1
		di r(N)
		local bc =r(N)
		
		
		
		
			count if spps==1		// store counts of each distirct into memory to use in the graph labels
		di r(N)
		local spps =r(N)
		count if mps==1
		di r(N)
		local mps =r(N)
		count if bc==1
		di r(N)
		local bc =r(N)
		count if cpa==1
		di r(N)
		local cpa =r(N)
